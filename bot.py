import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "8022750372:AAFRB0z-KWtvrhOpg6hVBGYNLz0dFyALP3c"

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∞–∑–∫–∞—Ä–æ–≤ (–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "morning")
def load_morning_azkar(filename):
    with open(filename, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data["morning"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –∞–∑–∫–∞—Ä–æ–≤ (—Å–ø–∏—Å–æ–∫)
def load_evening_azkar(filename):
    with open(filename, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data  # data ‚Äî —É–∂–µ —Å–ø–∏—Å–æ–∫

MORNING_AZKAR = load_morning_azkar("morning_azkar.json")
EVENING_AZKAR = load_evening_azkar("evening_azkar.json")

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_data = {}  # —Ö—Ä–∞–Ω–∏—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ user_id: {"type": "morning" –∏–ª–∏ "evening", "index": 0}

async def send_azkar(chat_id: int, azkar_list: list, index: int):
    azkar = azkar_list[index]
    kb = InlineKeyboardBuilder()
    kb.button(text="üìò –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"translate_{index}")
    # –°–æ–æ–±—â–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç + –∞—Ä–∞–±—Å–∫–∏–π
    msg_text = f"–ê–∑–∫–∞—Ä {index + 1}:\n\n{azkar['text']}\n\n" \
               f"–ê—Ä–∞–±—Å–∫–∏–π:\n{azkar.get('arabic', '')}"
    await bot.send_message(chat_id, msg_text, reply_markup=kb.as_markup())
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    try:
        audio_file = FSInputFile(azkar["audio_path"])
        await bot.send_audio(chat_id, audio=audio_file)
    except FileNotFoundError:
        await bot.send_message(chat_id, f"‚ùóÔ∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {azkar['audio_path']}")
    except Exception as e:
        await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ:\n{type(e).__name__}: {e}")

@dp.message(Command("start"))
async def start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∞–∑–∫–∞—Ä—ã", callback_data="choose_morning")
    kb.button(text="üåÉ –í–µ—á–µ—Ä–Ω–∏–µ –∞–∑–∫–∞—Ä—ã", callback_data="choose_evening")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∞–∑–∫–∞—Ä—ã —Ö–æ—Ç–∏—Ç–µ —á–∏—Ç–∞—Ç—å:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data in ["choose_morning", "choose_evening"])
async def choose_azkar(callback: CallbackQuery):
    user_id = callback.from_user.id
    if callback.data == "choose_morning":
        user_data[user_id] = {"type": "morning", "index": 0}
        await callback.message.edit_text("üïä –ù–∞—á–Ω–µ–º —á–∏—Ç–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –∞–∑–∫–∞—Ä—ã.")
        await send_azkar(callback.message.chat.id, MORNING_AZKAR, 0)
    else:
        user_data[user_id] = {"type": "evening", "index": 0}
        await callback.message.edit_text("üåô –ù–∞—á–Ω–µ–º —á–∏—Ç–∞—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ –∞–∑–∫–∞—Ä—ã.")
        await send_azkar(callback.message.chat.id, EVENING_AZKAR, 0)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("translate_"))
async def show_translation(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∑–∫–∞—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
        return
    index = int(callback.data.split("_")[1])
    azkar_type = user_data[user_id]["type"]
    azkar_list = MORNING_AZKAR if azkar_type == "morning" else EVENING_AZKAR
    azkar = azkar_list[index]

    kb = InlineKeyboardBuilder()
    next_index = index + 1
    if next_index < len(azkar_list):
        kb.button(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∞–∑–∫–∞—Ä", callback_data=f"next_{next_index}")
    else:
        kb.button(text="‚úÖ –í—Å–µ –∞–∑–∫–∞—Ä—ã –ø—Ä–æ—á–∏—Ç–∞–Ω—ã", callback_data="done", )
    await callback.message.edit_text(
        f"{azkar['text']}\n\n–ê—Ä–∞–±—Å–∫–∏–π:\n{azkar.get('arabic', '')}\n\n"
        f"üìò –ü–µ—Ä–µ–≤–æ–¥:\n{azkar['translation']}",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("next_"))
async def next_azkar(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∑–∫–∞—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
        return
    next_index = int(callback.data.split("_")[1])
    azkar_type = user_data[user_id]["type"]
    azkar_list = MORNING_AZKAR if azkar_type == "morning" else EVENING_AZKAR

    if next_index >= len(azkar_list):
        # –ü—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∑–∫–∞—Ä–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º send_azkar
        await callback.message.edit_text("‚úÖ –í—Å–µ –∞–∑–∫–∞—Ä—ã –ø—Ä–æ—á–∏—Ç–∞–Ω—ã. –î–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–¥–∏—Ç —Ç–µ–±—è –ê–ª–ª–∞—Ö!")
        await callback.answer()
        return

    user_data[user_id]["index"] = next_index
    await send_azkar(callback.message.chat.id, azkar_list, next_index)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "done")
async def done_callback(callback: CallbackQuery):
    await callback.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á—Ç–µ–Ω–∏–µ –∞–∑–∫–∞—Ä–æ–≤. –°–ø–∞—Å–∏–±–æ!", show_alert=True)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
